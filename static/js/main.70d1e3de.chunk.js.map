{"version":3,"sources":["BooksAPI.js","Book.js","SearchPage.js","CurrentlyReading.js","WanttoRead.js","Read.js","App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","search","query","Book","state","shelfSelection","props","target","this","onChangeShelf","bgPic","imageLinks","thumbnail","className","style","width","height","backgroundImage","value","onChange","event","setShelf","disabled","title","authors","React","Component","SearchPage","queryTimer","changeQuery","clearTimeout","name","setState","setTimeout","updateSearch","console","log","BooksAPI","response","undefined","error","map","bookInShelf","find","b","to","type","placeholder","key","CurrentlyReading","bookshelf","CurrentlyReadingBooks","filter","filterCurrentlyReading","WanttoRead","WanttoReadBooks","filterWanttoRead","Read","ReadBooks","filterRead","App","newBook","refreshAllBooks","bookAdded","changeShelf","newList","slice","listBook","length","push","path","render","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.70d1e3de.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\n//import * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Book extends React.Component {\r\n    state = {\r\n        shelfSelection: this.props.book.shelf || \"none\"\r\n        \r\n    }\r\n\r\n\r\n    setShelf(target) {\r\n    \r\n\r\n        this.props.onChangeShelf(this.props.book, target);\r\n\r\n    }\r\n\r\n    render() {\r\n      \r\n        var bgPic = (this.props.book.imageLinks && `url(${this.props.book.imageLinks.thumbnail})`);\r\n\r\n        return (\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div className=\"book-cover\" style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: bgPic,\r\n                    }}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        <select \r\n                            id=\"shelfselect\"  \r\n                            value={this.state.shelfSelection}\r\n                            onChange={(event)=>this.setShelf(event.target.value)}>\r\n                            <option value=\"move\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\">{this.props.book.title}</div>\r\n                <div className=\"book-authors\">{this.props.book.authors}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nBook.propTypes = {\r\n\r\n    book: PropTypes.object.isRequired,\r\n    onChangeShelf: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Book","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Book from './Book'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass SearchPage extends React.Component {\r\n  state = {\r\n    query: \"\",\r\n    books: [],\r\n\r\n  }\r\n\r\n  queryTimer = null;\r\n\r\n  changeQuery = (event) => {\r\n\r\n    clearTimeout(this.queryTimer);\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n\r\n    this.queryTimer = setTimeout(this.updateSearch, 200);\r\n    console.log(\"query: \" + this.state.query);\r\n    console.log(this.state.books);\r\n    console.log(\"Change Query\");\r\n\r\n  }\r\n\r\n  updateSearch = () => {\r\n\r\n    if (this.state.query === \"\") {\r\n      this.setState({ books: [] });\r\n      return;\r\n    }\r\n    console.log(\"Search\");\r\n\r\n    BooksAPI.search(this.state.query)\r\n      .then(response => {\r\n\r\n        if (response === undefined || response.error) {\r\n          console.log(\"SearchAPI Error\");\r\n          response = [];\r\n        }\r\n\r\n        response = response.map((book) => {\r\n          const bookInShelf = this.props.books.find(b => b.id === book.id);\r\n\r\n          if (bookInShelf) {\r\n            book.shelf = bookInShelf.shelf;\r\n          }\r\n          return book;\r\n        }\r\n        );\r\n\r\n        this.setState({ books: response });\r\n\r\n      }\r\n      );\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    // console.log(\"query: \"+this.state.query);\r\n    //console.log(this.state.books);\r\n\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link className=\"close-search\" to='/'>Close</Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              onChange={this.changeQuery}\r\n              value={this.state.query}\r\n              name=\"query\"\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n\r\n            {this.state.books.map((book) =>\r\n              <li key={book.id}>\r\n                <Book book={book} onChangeShelf={this.props.onChangeShelf} />\r\n              </li>\r\n\r\n            )}\r\n\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nSearchPage.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n  onChangeShelf: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPage","import React from 'react'\r\n// import * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Book from './Book'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CurrentlyReading extends React.Component {\r\n  state = {\r\n\r\n\r\n  }\r\n\r\n  filterCurrentlyReading(bookshelf) {\r\n    return bookshelf.shelf === \"currentlyReading\"\r\n  }\r\n\r\n  render() {\r\n\r\n    const CurrentlyReadingBooks = this.props.books.filter(this.filterCurrentlyReading);\r\n\r\n\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n\r\n\r\n\r\n            {CurrentlyReadingBooks.map((book) =>\r\n              <li key={book.id}>\r\n                <Book book={book} onChangeShelf={this.props.onChangeShelf}/>\r\n              </li>\r\n\r\n            )}\r\n\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCurrentlyReading.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n  onChangeShelf: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CurrentlyReading","import React from 'react'\r\n// import * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Book from './Book'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass WanttoRead extends React.Component {\r\n  state = {\r\n\r\n\r\n  }\r\n\r\n  filterWanttoRead(bookshelf){\r\n    return bookshelf.shelf===\"wantToRead\"\r\n  }\r\n\r\n  render() {\r\n    \r\n    const WanttoReadBooks = this.props.books.filter(this.filterWanttoRead);\r\n\r\n    \r\n    return (\r\n\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n\r\n          {WanttoReadBooks.map((book) =>\r\n              <li key={book.id}>\r\n                <Book book={book} onChangeShelf={this.props.onChangeShelf}/>\r\n              </li>\r\n\r\n            )}\r\n\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nWanttoRead.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default WanttoRead","import React from 'react'\r\n// import * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Book from './Book'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Read extends React.Component {\r\n  state = {\r\n\r\n\r\n  }\r\n\r\n  filterRead(bookshelf){\r\n    return bookshelf.shelf===\"read\"\r\n  }\r\n\r\n  render() {\r\n\r\n    const ReadBooks = this.props.books.filter(this.filterRead);\r\n\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">Read</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n\r\n          {ReadBooks.map((book) =>\r\n              <li key={book.id}>\r\n                <Book book={book} onChangeShelf={this.props.onChangeShelf}/>\r\n              </li>\r\n\r\n            )}\r\n\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nRead.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Read","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport SearchPage from './SearchPage'\nimport { Route } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport CurrentlyReading from './CurrentlyReading'\nimport WanttoRead from './WanttoRead'\nimport Read from './Read'\n\nclass App extends React.Component {\n  state = {\n    books: [],\n    newBook: true,\n  }\n\n  componentDidMount() {\n    if (this.state.newBook) {\n      this.refreshAllBooks();\n    }\n\n  }\n\n  refreshAllBooks=()=>{\n    BooksAPI.getAll()\n    .then((books) => { this.setState(() => ({\n       books: books,\n       newBook: false,\n      }));\n     })\n\n  }\n\n  bookAdded =() => {\n    this.setState({newBook: true});\n  }\n\n\n  changeShelf=(book, shelf)=>{\n\n\n    \n    BooksAPI.update(book,shelf)\n    .then(\n      response => {\n        let newList = this.state.books.slice(0);\n  \n        const books = newList.filter(listBook => listBook.id === book.id);\n        if (books.length){\n          books[0].shelf=shelf;\n\n        }\n        else{\n          book.shelf=shelf;\n          newList.push(book);\n          \n        }\n        this.setState({books:newList})\n      }\n\n    )\n  }\n\n  render() {\n\n    return (\n      <div className=\"app\">\n\n        <Route path='/search' render={() => (<SearchPage books={this.state.books} onChangeShelf={this.changeShelf}/>)}/>\n\n        <Route exact path='/' render={() => (\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n              <div>\n                <CurrentlyReading books={this.state.books} onChangeShelf={this.changeShelf}/>\n                <WanttoRead books={this.state.books} onChangeShelf={this.changeShelf}/>\n                <Read books={this.state.books} onChangeShelf={this.changeShelf}/>\n              </div>\n            </div>\n\n            <div className=\"open-search\">\n              <Link className=\"open-searchLink\" to='/search'>Add a book</Link>\n            </div>\n\n          </div>\n\n        )}\n        />\n\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}